7.栈的应用-四则运算算术表达式求解(算符优先法)

https://blog.csdn.net/wenzhou1219/article/details/23961307

表达式求解在程序编译器设计和科学计算器设计中是最基本的一个问题。

这里我们简化模型为简单的四则运算求解,如下:

1+223*309+(9-48/25)

输入的数字称为操作数

输入的运算符为‘+’、‘-’、‘*’、‘/’四则元素符

输入括号‘(’、')'称为界限符

任何一个算术表达式都是由操作数、运算符和界限符构成的。


那么这里为了方便，我们把运算符和界限符统称为算符。这里我们采用所谓的“算符优先法”：

比如说对于1+2*3+2-3/5我们人为计算的时候，肯定是先计算*/再计算+-，现在让计算机计算这个表达式，那么必然要模拟这种求值的先后顺序，假设两个从左向右相邻的运算符分别为θ1、θ2，则他们的优先级表如下

这样我们计算的时候只需要查表即可得到两个相邻的算符的优先级，这里我们从左向右遍历表达式，显然对于表达式1+223*(309-48/25)只是凭借当前的1+233是不能确定是否要计算的，必须继续遍历直到1+223*309+才能确定要计算223*309，这很明显要使用栈结构。设计算法如下：

构建两个栈，一个保存操作数，一个保存算符，从左向右遍历表达式
1.遇到数字，压入操作数栈

2.遇到算符则比较栈顶元素和算符的优先级

1).栈顶元素比算符的优先级低，算符压栈

2).栈顶元素与操作符的优先级相同，证明是配对的()或##，栈顶算符出栈

3).栈顶元素比算符的优先级高，算符出栈1个，操作数出栈2个，计算完的结果压入操作数栈


结合算法，理解优先级表的构建原因:

1.这里在运算表达式的开头和结尾计算时都加入一个#，#的优先级最低，标志计算的开始和结束。

2.注意括号()和井号##比较结果为=，当这两者对比时，直接将(出栈表明一个()内的内容已经计算完成，准备进行接下来的计算

3.)和(、#和)、(和#都是不能配对的，配对则说明表达式不合法


在算法实现的过程中还要注意

1.在没有完成计算之前操作数栈或算符栈为空则说明表达式不合法，完成计算以后算符栈不为空或操作数栈长度不为1则表达式不合法

2.除数为0则表达式不合法


var calculate = function(s) {
    const ops = [1];
    let sign = 1;

    let ret = 0;
    const n = s.length;
    let i = 0;
    while (i < n) {
        if (s[i] === ' ') {
            i++;
        } else if (s[i] === '+') {
            sign = ops[ops.length - 1];
            i++;
        } else if (s[i] === '-') {
            sign = -ops[ops.length - 1];
            i++;
        } else if (s[i] === '(') {
            ops.push(sign);
            i++;
        } else if (s[i] === ')') {
            ops.pop();
            i++;
        } else {
            let num = 0;
            while (i < n && !(isNaN(Number(s[i]))) && s[i] !== ' ') {
                num = num * 10 + s[i].charCodeAt() - '0'.charCodeAt();
                i++;
            }
            ret += sign * num;
        }
    }
    return ret;
};

作者：LeetCode-Solution
链接：https://leetcode-cn.com/problems/basic-calculator/solution/ji-ben-ji-suan-qi-by-leetcode-solution-jvir/
来源：力扣（LeetCode）
著作权归作者所有。商业转载请联系作者获得授权，非商业转载请注明出处。



var calculate = function(s) {
    s = s.trim();
    const stack = new Array();
    let preSign = '+';
    let num = 0;
    const n = s.length;
    for (let i = 0; i < n; ++i) {
        if (!isNaN(Number(s[i])) && s[i] !== ' ') {
            num = num * 10 + s[i].charCodeAt() - '0'.charCodeAt();
        }
        if (isNaN(Number(s[i])) || i === n - 1) {
            switch (preSign) {
                case '+':
                    stack.push(num);
                    break;
                case '-':
                    stack.push(-num);
                    break;
                case '*':
                    stack.push(stack.pop() * num);
                    break;
                default:
                    stack.push(stack.pop() / num | 0);
            }   
            preSign = s[i];
            num = 0;
        }
    }
    let ans = 0;
    while (stack.length) {
        ans += stack.pop();
    }
    return ans;
};

作者：LeetCode-Solution
链接：https://leetcode-cn.com/problems/basic-calculator-ii/solution/ji-ben-ji-suan-qi-ii-by-leetcode-solutio-cm28/
来源：力扣（LeetCode）
著作权归作者所有。商业转载请联系作者获得授权，非商业转载请注明出处。